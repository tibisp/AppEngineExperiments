diff --git a/.settings/org.eclipse.wst.common.component b/.settings/org.eclipse.wst.common.component
index 58dddef..9d2d723 100644
--- a/.settings/org.eclipse.wst.common.component
+++ b/.settings/org.eclipse.wst.common.component
@@ -3,7 +3,6 @@
         <wb-resource deploy-path="/" source-path="/target/m2e-wtp/web-resources"/>
         <wb-resource deploy-path="/" source-path="/src/main/webapp" tag="defaultRootSource"/>
         <wb-resource deploy-path="/WEB-INF/classes" source-path="/src/main/java"/>
-        <wb-resource deploy-path="/WEB-INF/classes" source-path="/src/test/java"/>
         <property name="java-output-path" value="/AppEngineExperiments/build/classes"/>
         <property name="context-root" value="experiments"/>
     </wb-module>
diff --git a/pom.xml b/pom.xml
index ca3fb1d..83eb1f9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -2,51 +2,32 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
       
     <modelVersion>4.0.0</modelVersion>
-      
     <packaging>war</packaging>
-      
     <version>0.1.0-SNAPSHOT</version>
-      
     <groupId>me.serendipify.appengine</groupId>
-      
     <artifactId>experiments</artifactId>
-      
+
     <properties>
-            
         <appengine.maven.plugin.version>2.2.0</appengine.maven.plugin.version>
-            
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-            
         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
-            
         <maven.compiler.source>1.8</maven.compiler.source>
-            
         <maven.compiler.target>1.8</maven.compiler.target>
-            
         <maven.compiler.showDeprecation>true</maven.compiler.showDeprecation>
-          
     </properties>
       
     <dependencyManagement>
             
         <dependencies>
-                  
+
             <dependency>
-                        
                 <groupId>com.google.cloud</groupId>
-                        
                 <artifactId>libraries-bom</artifactId>
-                        
                 <version>4.2.0</version>
-                        
                 <type>pom</type>
-                        
                 <scope>import</scope>
-                      
             </dependency>
-                
         </dependencies>
-          
     </dependencyManagement>
       
     <dependencies>
@@ -54,37 +35,23 @@
         <!-- Compile/runtime dependencies -->
             
         <dependency>
-                  
             <groupId>javax.servlet</groupId>
-                  
             <artifactId>javax.servlet-api</artifactId>
-                  
             <version>3.1.0</version>
-                  
             <scope>provided</scope>
-                
         </dependency>
             
         <dependency>
-                  
             <groupId>javax.servlet.jsp</groupId>
-                  
             <artifactId>javax.servlet.jsp-api</artifactId>
-                  
             <version>2.3.1</version>
-                  
             <scope>provided</scope>
-                
         </dependency>
             
         <dependency>
-                  
             <groupId>jstl</groupId>
-                  
             <artifactId>jstl</artifactId>
-                  
             <version>1.2</version>
-                
         </dependency>
             
         <dependency>
@@ -100,17 +67,37 @@
         <!-- Test Dependencies -->
             
         <dependency>
-                  
             <groupId>junit</groupId>
-                  
             <artifactId>junit</artifactId>
-                  
             <version>4.12</version>
-                  
             <scope>test</scope>
-                
         </dependency>
+        
+        <!-- https://mvnrepository.com/artifact/javax.json/javax.json-api -->
+		<dependency>
+		    <groupId>javax.json</groupId>
+		    <artifactId>javax.json-api</artifactId>
+		    <version>1.1.4</version>
+		</dependency>
+        
+		<dependency>
+		    <groupId>org.glassfish</groupId>
+		    <artifactId>javax.json</artifactId>
+		    <version>1.1</version>
+		</dependency>
           
+        <!-- https://mvnrepository.com/artifact/javax.json.bind/javax.json.bind-api -->
+		<dependency>
+		    <groupId>javax.json.bind</groupId>
+		    <artifactId>javax.json.bind-api</artifactId>
+		    <version>1.0</version>
+		</dependency>
+
+		<dependency>
+			<groupId>com.google.api-client</groupId>
+			<artifactId>google-api-client</artifactId>
+			<version>1.30.8</version>
+		</dependency>
     </dependencies>
       
     <build>
diff --git a/src/main/java/me/serendipify/appengine/experiments/HelloAppEngine.java b/src/main/java/me/serendipify/appengine/experiments/HelloAppEngine.java
index 0f7364f..76044fe 100644
--- a/src/main/java/me/serendipify/appengine/experiments/HelloAppEngine.java
+++ b/src/main/java/me/serendipify/appengine/experiments/HelloAppEngine.java
@@ -1,26 +1,95 @@
 package me.serendipify.appengine.experiments;
 
 import java.io.IOException;
+import java.security.GeneralSecurityException;
+import java.util.Arrays;
+import java.util.List;
 
 import javax.servlet.annotation.WebServlet;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;
+import com.google.api.client.auth.oauth2.Credential;
+import com.google.api.client.extensions.appengine.http.UrlFetchTransport;
+import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
+import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl;
+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
+import com.google.api.client.http.HttpTransport;
+import com.google.api.client.json.JsonFactory;
+import com.google.api.client.json.jackson2.JacksonFactory;
+import com.google.api.client.util.store.FileDataStoreFactory;
+
 @WebServlet(
     name = "HelloAppEngine",
     urlPatterns = {"/hello"}
 )
+
+//static final serialVerionUID = "10";
+
 public class HelloAppEngine extends HttpServlet {
 
-  @Override
+  /**
+   * TODO change this	
+   * */
+	private static final long serialVersionUID = 1L;
+
+	 /** Global instance of the HTTP transport. */
+	  private static HttpTransport httpTransport = null;
+	  private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
+	  
+	  /** OAuth 2.0 scopes. */
+	  private static final List<String> SCOPES = Arrays.asList(
+	      "r_basicprofile",
+	      "r_emailaddress");
+	  
+	  /**
+	   * Global instance of the {@link DataStoreFactory}. The best practice is to make it a single
+	   * globally shared instance across your application.
+	   */
+	  private static FileDataStoreFactory dataStoreFactory;
+	  
+	  /** Directory to store user credentials. */
+	  private static final java.io.File DATA_STORE_DIR =
+	      new java.io.File(System.getProperty("user.home"), ".store/oauth2_sample");
+	  
+@Override
   public void doGet(HttpServletRequest request, HttpServletResponse response) 
       throws IOException {
-
-    response.setContentType("text/plain");
+	try {
+		httpTransport = GoogleNetHttpTransport.newTrustedTransport();
+	} catch (GeneralSecurityException | IOException e) {
+		// TODO Auto-generated catch block
+		e.printStackTrace();
+	}
+	
+	// set up authorization code flow
+/* 
+    dataStoreFactory = new FileDataStoreFactory(DATA_STORE_DIR);
+    GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
+        httpTransport, JSON_FACTORY, "client_id", "secret", SCOPES).setDataStoreFactory(
+        dataStoreFactory).build();
+	 
+	Credential ctoken = flow.loadCredential("lean.sheann");
+	
+	String authUrl = flow.newAuthorizationUrl().setState("xyz")
+	        .setRedirectUri("https://localhost:8080/success.html").build();
+	response.getWriter().print("Hello App Engine!\r\n");
+	*/
+	
+//    GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(transport, jsonFactory, client_id, client_secret, scopes).build();
+//    GoogleAuthorizationCodeRequestUrl url = flow.newAuthorizationUrl();
+	
+    String url =
+            new GoogleAuthorizationCodeRequestUrl("https://www.linkedin.com/oauth/v2/authorization",
+                "clientid", "http://localhost:8080/success.html", SCOPES).setState("/profile").build();
+    response.sendRedirect(url);
+//	GoogleAuthorizationCodeRequestUrl(String authorizationServerEncodedUrl, String clientId, String redirectUri, Collection<String> scopes) 
+/*    response.setContentType("text/plain");
     response.setCharacterEncoding("UTF-8");
-
-    response.getWriter().print("Hello App Engine!\r\n");
-
+*/
+	
+	
   }
 }
\ No newline at end of file
